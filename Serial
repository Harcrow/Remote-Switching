/*
This is the 'slave' Arduino.  It should receive a wireless signal
from the 'master' Due.  Currently the signal should just be an 'a' or
'b' to decide on/off status.
*/

#include <SoftwareSerial.h>

SoftwareSerial xbee(2, 3); // RX, TX

String command = "";
String turn_on = "turn1";
String turn_off = "turn0";

char temp;
int blue = 12;
byte state = 0;
boolean complete = false;

void setup()
{
 // Open serial communications and wait for port to open:
 Serial.begin(1200);
 
 pinMode(blue, OUTPUT);
 
 // set the data rate for the SoftwareSerial port
 xbee.begin(1200);
 //System is ready to recieve commands
 Serial.println("Systems go ");
 // check_for.reserve(30);
  
}

void loop() 
{      
//Serial.write("Why");
     while(xbee.available() && xbee.peek() != '\n')
         {
           //building the string
           temp = xbee.read();
           command.concat(temp);
           Serial.println(command);
           //printing the serial so we understand what it's reading
         }
        
      if(xbee.peek() == '\n')
         {
               //letting us know we're done and printing the recieved command  
               Serial.println("Command Complete: "  + command);
               //clearing the '\n' from the buffer
               temp = xbee.read();
               complete = true;
         }    
     
      
if (complete == true)
        {
          
          command.trim(); 
          Serial.println("Checking for command string");
         
        /* 
        
             This was the debug to find out if the code was appending a white space
             to the end of the 'command' string.
             Turns out it was happeneing, so the command.trim() function (above) fixed it.
          len = command.length();
          Serial.println(len);
          len = command.length();
          Serial.println(len);
        */
          if(command == "turn1")
             {
               digitalWrite(blue, HIGH);
               Serial.println("LED should be on ");
             }
             Serial.println("Turn on command failed");
             
          if(command == turn_off)
             {
               digitalWrite(blue, LOW);
               Serial.println("LED should be OFF");
             }
             
             Serial.println("Turn off command failed");
           //reset the command
           command = "";
           //reset complete
           complete = false;
        }
      
}
